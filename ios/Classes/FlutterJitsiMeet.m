// Autogenerated from Pigeon (v4.2.14), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "FlutterJitsiMeet.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[ error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null] ];
  }
  return @[ result ?: [NSNull null]  ];
}
static id GetNullableObject(NSDictionary* dict, id key) {
  id result = dict[key];
  return (result == [NSNull null]) ? nil : result;
}
static id GetNullableObjectAtIndex(NSArray* array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}


@interface TimeLimitResult ()
+ (TimeLimitResult *)fromList:(NSArray *)list;
+ (nullable TimeLimitResult *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end
@interface UsedApp ()
+ (UsedApp *)fromList:(NSArray *)list;
+ (nullable UsedApp *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@implementation TimeLimitResult
+ (instancetype)makeWithState:(ResultState)state
    message:(NSString *)message {
  TimeLimitResult* pigeonResult = [[TimeLimitResult alloc] init];
  pigeonResult.state = state;
  pigeonResult.message = message;
  return pigeonResult;
}
+ (TimeLimitResult *)fromList:(NSArray *)list {
  TimeLimitResult *pigeonResult = [[TimeLimitResult alloc] init];
  pigeonResult.state = [GetNullableObjectAtIndex(list, 0) integerValue];
  pigeonResult.message = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.message != nil, @"");
  return pigeonResult;
}
+ (nullable TimeLimitResult *)nullableFromList:(NSArray *)list { return (list) ? [TimeLimitResult fromList:list] : nil; }
- (NSArray *)toList {
  return @[
    @(self.state),
    (self.message ?: [NSNull null]),
  ];
}
@end

@implementation UsedApp
+ (instancetype)makeWithId:(NSString *)id
    name:(NSString *)name
    minutesUsed:(NSNumber *)minutesUsed {
  UsedApp* pigeonResult = [[UsedApp alloc] init];
  pigeonResult.id = id;
  pigeonResult.name = name;
  pigeonResult.minutesUsed = minutesUsed;
  return pigeonResult;
}
+ (UsedApp *)fromList:(NSArray *)list {
  UsedApp *pigeonResult = [[UsedApp alloc] init];
  pigeonResult.id = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.id != nil, @"");
  pigeonResult.name = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.name != nil, @"");
  pigeonResult.minutesUsed = GetNullableObjectAtIndex(list, 2);
  NSAssert(pigeonResult.minutesUsed != nil, @"");
  return pigeonResult;
}
+ (nullable UsedApp *)nullableFromList:(NSArray *)list { return (list) ? [UsedApp fromList:list] : nil; }
- (NSArray *)toList {
  return @[
    (self.id ?: [NSNull null]),
    (self.name ?: [NSNull null]),
    (self.minutesUsed ?: [NSNull null]),
  ];
}
@end

@interface FlutterJitsiMeetApiCodecReader : FlutterStandardReader
@end
@implementation FlutterJitsiMeetApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [TimeLimitResult fromList:[self readValue]];
    
    case 129:     
      return [UsedApp fromList:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface FlutterJitsiMeetApiCodecWriter : FlutterStandardWriter
@end
@implementation FlutterJitsiMeetApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[TimeLimitResult class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else 
  if ([value isKindOfClass:[UsedApp class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface FlutterJitsiMeetApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FlutterJitsiMeetApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FlutterJitsiMeetApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FlutterJitsiMeetApiCodecReader alloc] initWithData:data];
}
@end


NSObject<FlutterMessageCodec> *FlutterJitsiMeetApiGetCodec() {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    FlutterJitsiMeetApiCodecReaderWriter *readerWriter = [[FlutterJitsiMeetApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void FlutterJitsiMeetApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FlutterJitsiMeetApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.FlutterJitsiMeetApi.getPlatformVersion"
        binaryMessenger:binaryMessenger
        codec:FlutterJitsiMeetApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getPlatformVersionWithCompletion:)], @"FlutterJitsiMeetApi api (%@) doesn't respond to @selector(getPlatformVersionWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api getPlatformVersionWithCompletion:^(NSString *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.FlutterJitsiMeetApi.getApps"
        binaryMessenger:binaryMessenger
        codec:FlutterJitsiMeetApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getAppsWithCompletion:)], @"FlutterJitsiMeetApi api (%@) doesn't respond to @selector(getAppsWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api getAppsWithCompletion:^(NSArray<UsedApp *> *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.FlutterJitsiMeetApi.setAppTimeLimit"
        binaryMessenger:binaryMessenger
        codec:FlutterJitsiMeetApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setAppTimeLimitAppId:durationInMinutes:completion:)], @"FlutterJitsiMeetApi api (%@) doesn't respond to @selector(setAppTimeLimitAppId:durationInMinutes:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_appId = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_durationInMinutes = GetNullableObjectAtIndex(args, 1);
        [api setAppTimeLimitAppId:arg_appId durationInMinutes:arg_durationInMinutes completion:^(TimeLimitResult *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
